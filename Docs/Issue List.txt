Animation Editor:

#142 [] In the baked animation, current eye gaze direction differs from target aligning direction (trgDirAlign)
  - It's like something changes the final pose after gaze has been applied, even though IK is (or should be) inactive

#141 [] More goddamn eye movement popping
  - See the stupid goddamn mess at MakeSandwichDemo, frames 1208-1211
  - Even the most basic fucking things about this gaze model are buggy and broken, I hate this shit
  - Just before the gaze controller changes from Shifting to NoGaze state, something causes a discontinuous change in trgDirAlign (which then also becomes fixTrgDirAlign)
  - srcDir seems to be behaving correctly
  - GetOMRTargetDirection() gives the wrong result, it seems
  - After ClampOMRToSource(), we get wrong trgDirAlign
  - It seems that in preceding frames, source direction and target direction are both outside valid OMR, so our new trgDirAlign is what we get when clamping trgDir to identity
  - Then at frame 1208, source direction is no longer outside OMR, so we clamp normally, leading to discontinuity
  - This is almost certainly the problem, must implement better way to clamp to OMR

#140 [] Inferred gaze instance timings are off compared to inferred gaze key times

#139 [X] Torso direction sometimes discontinuous from shifting to fixation phase
  - See frame 110-111 in StealDiamond

#138 [] Eyes on Norman may be too fast given their size when using the new formula for eye max. velocity
  - Scale down their velocity using the formula for stylized gaze
  - Not the most pressing issue right now...
  
#137 [] Torso source direction moves away from the target sometimes, causing the torso to appear delayed in its movement
  - See gaze shift at frame 130 of StealDiamond

#130 [] Character root jitters sometimes when using gaze IK

#129 [] Discontinuity in head direction at the start of the gaze shift when using gaze IK
  - When gaze shift latency phase starts, fixation target direction gets wrong
  
#124 [X] Stopping an ongoing gaze shift causes discontinuities in gaze body part directions
  - Following last summer's refactoring, it might make sense to just not interrupt ongoing gaze shifts, but merely delay or cancel new ones
  - See torso snapping in StealDiamond at 126-127 - gaze shift toward StealDiamondEnv-4 gets interrupted
  - The problem is that fixTrgDirAlign gets initialized to trgDirAlign, even though the latter hasn't been reached yet (rotParam < 1)
  
#105 [] Gaze doesn't work correctly for instance starting at frame 0

#118 [] Character pose and animation controller states can vary at the start of the animation timeline, which is incorrect

#112 [] IK does not work correctly for end-effector constraints attached to parts of the character affected by gaze

#111 [] IK does not work correctly for resized character models

#104 [] When using gaze IK, gaze cannot be unconstrained
  - There must be contiguous gaze instances along the entire timeline, otherwise IK won't work during "gaps"  

#127 [] OMR clamping does not work well when both source and target orientations lie outside valid OMR
  - See ClampOMRToSource() function
  - What happens is that the entire *arc* between the two orientations lies outside valid OMR area
  - We should instead find the closest point on the closed curve that denotes the OMR region to the arc between source and target orientations
  - No idea how to do this in quaternion space
  - Might get sufficiently good results if we instead treat the arc as a line in yaw-pitch space and find the closest point on the ellipse that denotes OMR
  
#135 [] If the character continues to rotate their body toward the target during the gaze fixation (b/c rotation is part of the body motion), torso may overshoot the target
  - See example StackBoxesGaze3
  - Probably b/c torsoAlign = 0, so torso direction will always be (nearly) fixSrcDir, but fixSrcDir doesn't get updated to reflect root movement, resulting in a state of increasing body torque

#133 [] Gaze instances do not seem to activate or deactivate correctly around timewarps
  - In WindowWashing example, see how WindowWashingAGaze20 activates before WindowWashingAGaze3 has deactivated
  
#134 [X] Discontinuity in head pose sometimes occurs when a gaze shift gets interrupted
  - See example StackBoxesGaze1 -> StackBoxesGaze2
  - See #124

#136 [X] GetInitControllerStateForEyeGazeInstance() is broken and gives a controller state that is totally wrong; it also corrupts the state of the gaze controller and it can no longer be restored to its state prior to the method call
  
#132 [X] Frames for timewarped instances incorrectly computed after the end of a timewarp; frame indexes lower than they should be and the timewarped part of the motion is replayed (this time at normal rate)
  - Observed with MovingHoldTimewarp
  - Does not seem to happen with LinearTimewarp

#131 [X] End-effector constraint times are incorrectly checked, because we fail to consider that animation might be scheduled to begin later than frame 0 (so its start time should be added to the end-effector constraint times)

#128 [X] Discontinuities in head and torso directions when using pelvis as part of the torso
  - See gaze shift at frame 141 of TestExpressiveGaze
  - When head latency phase ends, head source direction for the gaze shift starts at incorrect value (ditto for torso), even though fixTrgDirAlign (from which it's supposed to be initialized) appears to be correct
  - srcDir seems to be correctly initialized at first, but srcDir0 is wrong, and then srcDir somehow winds up being equal to srcDir0
  - The problem was that the character was not in the base pose when updating source directions, but that's fixed now

#123 [X] Root position all wrong when using gaze IK
  - In TestExpressiveGaze, the root starts off low and then abruptly gets moved to the correct position
  - All term weights seem to be continuous
  - Doesn't seem to have anything to do with the gaze pose or the gaze term
  - Even when using _ObjFunc1 (non-gaze objective) root is positioned wrong (except then it doesn't move)
  - Taking out dynamic gaze IK weight computation seems to get rid of root snapping (though some other issues occur now)
  - Non-zero gaze weights cause the root to move downward!
  - The problem seems to be that base pose weights are non-zero only when there are hand constraints, whereas when there are foot constraints, root position is completely free (since gaze controller doesn't constrain it)
  - Upper body posture should be weighed separately from root position; base upper body posture should be weighed more when there are hand constraints, whereas base root position should be weighed more in presence of *any* constraints
  - Addressed by using separate root position term

#126 [X] Torso moves and snaps a bit at the end of the latency phase of a gaze shift that has torso movement disabled
  - In such cases, torso source and target directions at gaze shift start should be equal to the aligning target direction of the preceding fixation
  - And yet, they seem to get initialized to *current* gaze direction (from the preceding fixation), which differs from the aligning target direction on account of torso vertical posture that gets preserved
  - This is likely the same problem as #125
  - Forgot to refactor latency handling code in _AdvanceGazeShift()
  - The problem is that source gaze direction is not the same thing as the actual body part direction, since layering will alter the latter
  - Need to do away with storing source gaze joint orientations and instead just keep track of source direction
  - We can initialize the source direction from fixTrgRotAlign, and we also need to update it on every frame to account for body movement (could compute rigid root offset from gaze shift start and apply it to source direction)
  - Made the change, and it works well now... when torso posture weight is set to 1
  - When torso posture weight is 0, there is again a discontinuity in torso posture
  - First time torso posture is applied in latency phase of the new gaze shift, there is a jump in fixTrgDir and fixTrgDirAlign!
  - Seems the problem is that GetTargetDirection() gives a different result depending on the current posture of *all gaze body parts* (not just the torso!), so we should make sure that they all have the same posture as they had at the end of the fixation
  - Fixed, finally
  - Also, eyes have stopped moving for some reason - weirdly, srcDir, trgDir, and curDir all seem correct, but the eye lasers are clearly wrong (trgDir and current direction are shown the same as srcDir), as are the actual eye orientations
  - Just a simple bug, fixed now
  - Must also test when there is torso rotation in the base animation, to see if source directions are correctly updated
  - There was a discontinuity in torso rotation, which is now fixed!

#113 [X] Velocity profile for the torso (and probably other body parts) is wrong - the peak occurs way too late in the gaze shift
  - Refactoring seems to have fixed the problem for the head, but not the torso
  - Fixed for the torso, but still need to test that it's fixed for torso.postureWeight = 0
  - Seems OK for all body parts now
  
#125 [X] Small torso movement at the start and end of gaze shift latency phase
  
#109 [X] Baking gaze animation is extremely slow
  - Gaze IK weight computation in AnimationTimeline._InitGazeIK() takes up a lot of time for some reason... or causes something else (IK?) to take a very long time
  - It's the IK solver that's slow... not much to do about it, it's the way it's designed

#117 [X] Character pose does not get reset properly when using Reset to Initial Pose

#116 [X] None of the keyboard shortcuts for gaze editing work anymore
  - Possibly related, but in the handler function for shortcuts, LeapAnimationEdit._animationEditGizmos == null always evaluates to true, even though it is definitely not null!
  
#100 [X] Gaze target inference will be invalid for manipulated objects
  - See BookShelf example - target inference might attach the gaze target to a book even at a time when the book should actually be in the character's hand
  
#62 [X] Stopping a gaze shift causes a discontinuity in pose
  - See #124

#94 [X] Torso snaps to a new pose as we start a new gaze shift in which torso movement is disabled
  - For example, create a gaze shift toward the diamond in the StealDiamond scenario, set torso align to 0, and watch what happens with the torso at gaze shift start
  
#122 [X] Torso orientation jitters and snaps between gaze shifts and fixations
  - See TestExpressiveGaze example
  - Happens regardless of IK configuration, for both regular, gaze, and no IK
  - Happens both with and without the root joint
  - Some weird jump in torso target direction when switching from gaze shift to fixation (even when there is no torso movement at all)
  - Oddly, taking out trgDir updates fixes the problem
  - Completely separating posture application from gaze shift updates fixes most problems, but the eyes are messed up now, probably b/c correct OMR-constrained target direction requires the current posture
  - Possible fix might be to apply the current (previous) posture at the start of gaze shift update, perform the update, then apply new posture
  - Doesn't really work, but applying source posture might
  - This helps with head and torso motion, but eyes are all messed up again, both trgDir and trgDirAlign are completely wrong
  - I guess target directions really do need to be updated for each body part separately, after the preceding body part has moved

#120 [X] Head snaps a bit when switching from gaze shift to fixation
  - There is a weird, big switch in source gaze directions

#121 [X] Target gaze directions are are always a bit off, eyes look "under" the target instead of directly at it
  - The problem is *not* in GazeBodyPart.GetTargetDirection()
  - It's b/c we run IK as post-process
  - Options: 1) use gaze IK, 2) don't use root IK, or 3) don't use IK at all

#119 [X] When head alignment is zero, head does not rotate far enough to enable both eyes to reach their target
  - What happens is, both eyes will hit OMR limits, get clamped, and become aligned (since their trgRotAlign is now set just on the edge OMR, and rotParam = 1 at trgRotAlign), so they won't move anymore (except due to updates to trgRotAlign?)
  - Head still keeps rotating until it reaches its trgRotAlign, which is the minimal rotation computed in _InitHeadTargetDirection()
  - Since the minimal head rotation is too low, gaze shift will stop before both eyes have actually aligned with the target
  - Came up with a somewhat hacky, but functional solution to the problem

#115 [X] Huge discontinuities in torso pose
  - See Roman in PassSodaEdits0

#114 [X] Jerkiness and small posture discontinuities at gaze instance boundaries
  - See BookShelfEdits0, between frames 900 and 1000
  - Seems to be worse in baked/exported motion

#110 [X] Constraining eyes by OMR does not work correctly
  - In WaitForBusEdits1 example, eye rotation around frame 142 is *way* outside valid downward OMR
  - For now I "fixed" it by setting much lower OMR than natural

#108 [X] Torso rotations are completely broken when torso posture weight in the gaze controller is set to zero
  - Discontinuous at gaze shift boundaries, see TestExpressiveGaze
  - Gaze shifts are unnaturally fast
  - Happens even when all IK is disabled
  - Happens only when using GazeController._ApplyRotation() to distribute rotation
  - The problem was in GazeJoint._ComputeTargetRotation() - we should *not* be computing target rotation in horizontal plane!

#107 [X] Hand constraint enforcement appears to be broken when character is rescaled
  - Roman in HandShake example; Norman in BookShelf example - constraints don't get enforced correctly
  - Norman in WindowWashing example - occasional snapping in character's pose

#106 [X] When adding a gaze instance at start frame 0, it gets delayed to start frame 1, but frame length does not get shortened; if there are gaze instances further down the timeline, the end frame of the new instance overlaps with the start frame of the next instance
  - Also see #105

#103 [X] Head and eyes overshoots the gaze target in some gaze shifts
  - See StealDiamondGaze2 when StealDiamondGaze1 is disabled and dynamic gaze IK weights are used
  - Fixed, I guess

#102 [X] Blending gaze instances is broken
  - When blend weight of the new gaze shift differs from the blend weight of the current gaze fixation, there is a discontinuity in head and torso rotations, like they are being initialized from non-blended rotations
  - Was a bug in how gaze controller blend weights were initialized, fixed now

#101 [X] Blending out gaze-ahead instances does not work when replaying baked gaze
  - See EyeGazeInstance.Apply() - blend weight is computed only when baking, but it doesn't get baked itself
  - Fixed that, but now there is issue #102

#99 [X] Gaze-ahead sometimes breaks and results in gaze in the wrong direction
  - Walking90deg has examples of how broken it is
  - Gaze-ahead should not be special gaze shifts, but normal gaze shifts towards targets in the distance
  - Ahead-targets themselves should be inferred as part of Danny's inference
  - The problem was actually in annotations, fixed now

#98 [X] Animation timeline allows temporally overlapping animations in the same layer, on the same character model

#96 [X] Unnatural head and torso poses can result at low values of alignment parameters due to source rotations no longer being valid due to underlying body movement
  - See head pose at the end of StealDiamondGaze2 - the character was hunching at the start of the gaze shift, but stands more upright as it goes on and consequently the head source rotation now points the head too high; since head align is low, target head rotation is fairly close to the source rotation, so it also looks bad!
  - Maybe source rotation should be defined with respect to the original gaze direction in world space? No, this makes the gaze target effectively unreachable if, for instance, the character turns around as it's doing a gaze shift
  - Idea - somehow update srcRot based on baseRot when alignment is low!

#95 [X] Sometimes eye gaze directions become divergent
  - See in the example used in #94
  - Might go away when #93 is fixed

#93 [X] Some gaze shifts are synthesized with head pose that does not match the specified alignment parameter
  - For example, create a gaze shift towards the diamond in the StealDiamond scenario, set head align to 0, and watch what happens with the head as target is reached
  - The problem seems to be in torso movement towards the target - even though torso align is 0, the torso just "drops" downward for some reason (see frames 118-122)
  - Last torso joint has rotParamAlign at 1 and trgReached at true and for some reason it still moves down by a large amount
  - Has nothing to do with with joint rotation redistribution... if anything, disabling the latter only makes the problem worse, with the torso snapping all over the place
  - The problem only occurs when the target is low and close to the character (e.g., right at their feet) - moving it away avoids the problem
  - Unrelated to torso movement - even after fixing #97 the problem persists, see StealDiamondGaze9
  - The problem is much more pronounced when using gaze IK
  - Fixed (or at least greatly reduced) by improving how torso target pose is applied in GazeController._ApplyTargetPose()
  
#92 [X] Torso sometimes snaps when using gaze IK
  - See frames 243-244 in StealDiamond example
  - Also at some gaze instance boundaries in the same example, e.g., frames 154-155
  - Discontinuous goal weights?
  - New instance at frames 154-155 in StealDiamond example
  - IK solver isn't even getting called until frame 154?!
  - At frame 154 it is called without any goals defined, then at 155 there are goals, but their weights are nearly zero (that's the way it's supposed to be, I think)
  - It's because solver only gets run when there are goals with non-zero weights - fixed that now
  
#97 [X] Abrupt downward or upward movement of the torso in some gaze shifts
  - Examples in TestExpressiveGaze
  - Happens near the end of the gaze shift, torso abruptly changes direction - even when baseVPostureWeight is 0, which means we are directly interpolating gaze pose and base pose
  - Happens even when not using gaze IK
  - Happens even when it isn't full torso alignment
  - Problem with both trajectory and (it seems) velocity
  - Seems it happens when initial torso posture is very different from the target gaze posture (e.g., very hunched character) - the character abruptly "straightens out"
  - This further suggests that gaze controller should (at most) be altering the torso pose in the horizontal plane
  - ... made that modification in the gaze controller

#91 [X] When using redistribution of gaze joint rotations, torso rotations are slightly discontinuous when starting fixation
  - Problem disappears when gaze is applied at least twice per frame - good enough for a temporary fix

#90 [X] Eyes snap apart when starting a new gaze shift
  - Both eyes should start rotating from their VOR pose at the end of the previous gaze instance, where eye directions intersect at the fixation target, but instead they snap to a pose where eye directions are parallel
  - This is likely the same problem as #83
  - Fixed, the problem was that source rotations were always getting reset to identity when starting a new gaze shift

#89 [X] Torso and head joints that aren't last/topmost in the chain may have incorrect values of aligning target rotations (trgRotAlign), which could affect BodyIKSolver results for the torso
  - For example, in _InitTorsoTargetRotations() it seems that trgRotAlign only gets initialize correctly for last joint (GazeController.Torso)
  - Yet trgRotAlign from other torso joints is used elsewhere, including in BodyIKSolver to solve for final torso pose

#88 [X] The way gaze joint rotations are applied gives rise to unnatural spine configurations
  - See StealDiamondGaze4 example - neck sticks out unnaturally
  - Proper fix would require a different parametrization of gaze (e.g., using gaze direction vectors) and solving for the pose of the gaze joint chain on every timestep
  - Came up with a more hacky fix that redistributes rotation in a post-process, but it causes issue #91

#87 [X] When there is a lot of fast body motion, gaze controller fails to reach the target
  - StealDiamondGaze1 is a good example where gaze is all over the place
  - Fixed by preventing rotParam* renormalization from ever reducing its value below what it was on the previous step
  
#86 [X] During VOR, we can't just keep the same orientation that was set when fixation started; alignment should approach 1 as body gets more aligned with the target or keep the original value as body rotates away from the target
  - This is a problem when there is a lot of body motion, esp. in walking motions

#85 []X Degenerate gaze shifts - gaze controller enters fixation mode even though neither eyes nor head have yet aligned with the target
  - StealDiamondGaze2 is a nasty example where for some reason neck is more aligned with the target than  the head!

#84 [X] Alignment inference still seems to have some issues
  - Check StealDiamond example

#83 [X] Eyes often snap when switching to a new gaze instance
  - Example when switching from WindowWashingGaze12 to WindowWashingGaze13
  - Fixed when fixing #90

#78 [X] Large snap in torso pose when using gaze IK and starting a new gaze shift
  - Happens when gaze shift starts, but torso is still in VOR mode due to latency

#77 [X] Large snap in head and eye pose when using gaze IK and starting a new gaze shift
  - This is prolly b/c gaze controller does not use the IK output pose when setting the source pose for the new gaze shift

#76 [X] Small discontinuities in gaze output pose when switching to VOR
  - This seems to be the same issue as #71, not fixed when I fixed #75
  - Torso joints seem to abruptly shift upward when VOR kicks in

#75 [X] Discontinuities in gaze output pose when switching to VOR
  - This seems to be the same issue as #71, brought back when I switched back to what was the original implementation
  - Discontinuity seems to be in the lowermost Torso joint, which inexplicably rotates by a large amount
  - Closer inspection reveals that lower-than-topmost gaze joints in a body part never achieve full alignment with the target during the gaze shift (which is OK - only the topmost joint is supposed to), but then they instantly snap to it during fixation (for some reason)
  - Was using fixRotParamAlign wrong, fixed now

#74 [X] Large discontinuities in output pose from BodyIKSolver when switching to VOR
  - Because of changes made to VOR while fixing #71
  - Rotation computation during VOR should be analogous to rotation computation during the gaze shift (with source and target rotations and whatnot), only difference being that rotation does not advance but remains static relative to the target

#73 [X] VOR won't work correctly when there is a sequence of gaze-ahead shifts
  - B/c gaze-ahead is towards a helper target that moves around - scheduling a gaze shift ahead while VOR is active towards previous ahead target position will cause the helper target to move and break the VOR
  - Implemented an untested fix

#72 [X] Large discontinuities in output pose from BodyIKSolver
  - TestExpressiveGaze example has a bunch
  - See #77
  
#71 [X] More discontinuities in gaze output pose when switching to VOR
  - Weirdly, discontinuities are not over a single frame, but over multiple frames
  - See TestExpressiveGaze, 2nd gaze shift - torso does a sudden rotation around roll axis
  - Might be related to roll removal (or lack thereof)?
  - Reactivated removeRoll option, but there is still a discontinuity (though not in roll)
  - Happens when switching from Shifting to NoGaze
  - Less noticeable with IK off, but pretty severe with IK on
  - Actually happens a couple of frames *after* starting VOR
  - In GazeJoint._ApplyVOR(), disabling _UpdateVORTargetRotation() fixes the problem - not really a fix tho
  - Happens for both head and torso joints
  - Happens with the eyes too! - it seems that eyes actually overshoot the gaze target by a little bit during the gaze shift and then snap to it when VOR starts
  - For some reason, rotParamAlign and rotParamMR for the eyes decrease down from 1 after alignment has been reached???
  - Problem solved by bringing back an old hack in GazeJoint._AdvanceRotation()
  - ... but now we have #74
  
#70 [X] Large discontinuities in output pose from BodyIKSolver when switching to VOR
  - Because of misunderstanding of difference between rotParamAlign and fixRotParamAlign in BodyIKSolver.ObjFunc2()

#69 [X] When using gaze IK output poses from BodyIKSolver during VOR are wrong
  - FixGazeTarget is set to an old value and it isn't properly initialized
  - FixGazeTarget wasn't part of the baked GazeController state

#68 [X] Baked GazeController state is sometimes wrong
  - State is NoGaze, CurrentGazeTarget and gazeTarget are both null...
  - It seems that those states never get initialized - maybe we're dropping frames?
  - Yes we are, fixed now - cannot advance time by more than 1f/LeapCore.editFrameRate

#67 [X] When using gaze IK lots of output poses from BodyIKSolver are equal to the original motion
  - Output pose is equal to the original motion (+ hand contacts enforced), yet gaze direction term of the objective function is zero, like we have perfect alignment!
  - Happens almost on every second frame after frames have been baked
  - It's because baked GazeController state is incorrect for some frames (among other things, CurrentGazeTarget is set to null) - see #68
  - Fixed by fixing #68

#66 [X] Target gaze rotation computation in the gaze controller is slightly off
  - GazeController.ApplyTargetPose() does not distribute trgRotAlign of the torso correctly among spine joints

#65 [X] Gaze controller goes into VOR state even though eyes haven't aligned with the target
  - Eyes don't seem to VOR at all, even though they are in VOR mode
  - See example WindowWashingAGaze8

#64 [X] Discontinuous pose when using expressive gaze animations
  - Many examples in WindowWashing
  - Snapping seems to happen when gaze controller goes from NoGaze to Shifting
  - Might be #60 redux
  - Fixed, no longer using expressive gaze animations

#63 [X] Ahead target position computation is off
  - See example in second gaze shift in WindowWashing, the ahead target is clearly too low and far right (it should be closer to WindowUpperLeft1)
  - Using better timing estimation now, but it's still quite off - need gaze shift timing inference!

#62 [X] Gaze alignment inference is incorrect
  - Seems to be totally broken when GazeController.useTorso is set to false
  - Even when using both head and torso, many values are obviously wrong
  - It might be that our gaze model lacks the expressive power of real human gaze in this example
  - Some issues: 1) lack of separation between horizontal and vertical alignment, 2) torso "overshoots" the target sometimes, e.g., in order to enable the hands to reach their targets, 3) our model doesn't allow the torso to be rotated closer to the target than the head (note that head align can be lower than torso align, but head align is *relative* to torso align + min. head rotation)
  - In some examples, we infer head align < 1 even though torso align = 1, which should be impossible
  - Reimplemented and seems to be fixed now
  
#64 [X] InitialPose animation keeps getting corrupted
  - Seems to be a Unity issue
  - This is a *severe* problem that makes the system virtually unusable
  - Restarting Unity seems to temporarily fix the problem
  - Rekeying all the joints seems to have fixed the problem

#63 [X] EyeGazeEditor.GetInitControllerForEyeGazeInstance() sets head and torso alignments to 1

#60 [X] VOR target rotation is discontinuous in the first frame of a gaze shift
  - fixTrgRot computation is discontinuous between gaze instances for some reason, but *only* when there is expressive gaze and *only* for the first frame of the gaze shift
  - Seems to be absent from the baked animation now
  - Seems to be absent, period

#58 [X] Source rotations and expressive rotation displacements do not get initialized correctly when starting a new gaze instance
  - The problem is that some joints, like the head, must continue to VOR on the old gaze target, using the last expressive displacements from the previous gaze instance
  - Then when they start shifting, their source rotations should be from the last VOR rotations, *not* from the source rotations set at the very start of the gaze shift
  - This may also fix #35
  - There is still a snap on the first frame of the new gaze instance, and it only occurs when there are expressive rotations
  - Maybe it's because the head changes from VOR to rotating within the same frame, yet expressive rotations are not set yet!
  - Now there is also a huge jump in head rotation at the start of the first gaze shift
  - This is a separate issue now, see #60

#59 [X] Bug in how gaze joint latency times are computed - latency times for child joints higher than for topmost joint in the body part
  
#57 [X] Expressive gaze displacement maps are incorrectly extracted - rotations are opposite of what they should be
  - Just for the gaze shift phase

#56 [X] Gaze alignment inference still inaccurate
  - For example, on TestExpressiveGaze1 and TestExpressiveGaze2 it gives an underestimate (should be 1 for both)
  - Caused by #55, accurate otherwise

#55 [X] Gaze shift time length estimates in EyeGazeEditor.ComputeEstGazeShiftTimeLength() are way off mark
  - See estimate for TestExpressiveGaze1
  - It seems that estimated distance to rotate is much shorter than it should be
  - Because trgRotAlign is way lower that it should be
  - Because curAlign is set to 0 instead of its proper value for some reason!
  - Because alignments haven't been inferred yet, duh
  - Computing for worst case scenario (all alignments set to 1) also gives an underestimate
  - Found a hacky "solution" by simply doubling the initial estimate - real fix will be having accurate gaze shift inference

#54 [X] When trying to remove an animation clip from an Animation component, Unity sometimes logs an error saying that the animation clip does not exist, even though it definitely does

#53 [X] Removing eye gaze in EyeGazeEditor.RemoveEyeGaze() results in some gaze instances having incorrect timings
  - This may also break EyeGazeEditor.SetEyeGazeTiming()

#52 [X] Adding a gaze instance that overlaps multiple other gaze instances does not work correctly

#51 [X] Spine joints in body motions often have roll movement (around the z axis), which our gaze model does not use - this invalidates head and torso alignment inferences
  - Related to #24
  - When non-zero roll is applied to a torso joint, it can have substantial effect on alignments, so our old approach of just ignoring roll isn't going to cut it anymore

#49 [X] End-effector goals are not displayed in the scene view when the character is selected

#48 [X] Current approach for gazing back and blending into the original motion has a bug where the character's pose snaps to the original motion instead of blending smoothly
  - Happens with Roman in the PassSoda test case
  
#47 [X] Current approach for gazing back and blending into the original motion is not valid when the original motion has the character facing a radically different direction from the ahead-direction (defined based on the position of the feet)
  - This happens with both Norman and Roman in the PassSoda test case

#46 [X] Gaze sometimes leaves alignment with a moving object during VOR phase
  - See how badly Roman tracks SodaBottleB in PassSoda test case

#45 [X] Moving end-effector goals attached to the character skeleton itself are not properly enforced
  - See PassSodaBMouth constraint in PassSoda example
  - Same problem as #112?

#44 [X] Eyes sometimes appear to violate OMR quite badly
  - See Roman's eyes in PassSoda example

#35 [X] Head snaps to wrong orientation when it begins to rotate at gaze shift start
  - This looks like #34, but circumstances are different - snapping occurs when latency time expires and neck joint stops VOR and begins to rotate
  - Base rotations and gaze rotations are both continuous, so it's discontinuity of the neck normal that is the problem
  - Yet this same discontinuity causes no problem for the topmost head joint
  - Nope, with a different gaze shift sequence it happens for the topmost head joint also
  - Seems to briefly snap to wrong rotation (one or two frames) before going back to normal?
  - Might just be a manifestation of #15
  - Fixed when fixing #58
  
#32 [X] Torso sometimes jitters during a gaze shift
  - Small discontinuities in pose
  - See end of instance InitialPoseGaze2 in InitialPose test case
  - It doesn't always happen - restarting Unity fixed the problem

#31 [X] Incorrect eye pose sometimes gets baked into a gaze instance clip for 1 frame
  - See left eye at frame 38 in InitialPose test case
  
#20 [X] Incongruent eye movements occasionally still happen
  - In InitialPose test case, somewhere between frames 200-300, eye gaze directions become divergent over the course of the gaze shift, though they seem to correct themselves by the end
  
#15 [X] Head joint rotations seem to snap/jitter between frames
  - Should check to make sure this artifact is present in baked animation - otherwise the issue is that animation gets rendered before it's applied
  - Doesn't seem to be present in baked animation

#24 [X] Inference of head and torso alignment values sometimes incorrect in EyeGazeEditor
  - Appears to work well for some gaze shifts, but not so for others - possibly because the body motion encodes gaze shifts that are not possible with our gaze model

#43 [X] Gaze annotations loading incorrectly - some get extended inordinately
  - See WindowWashingAGaze24, for instance
  - Not a bug, it's just that min. gaze length is set quite high (1s)

#42 [X] There are *still* discontinuities and snapping in body pose due to BodyIKSolver
  - WindowWashing example is full of them, just see frames 586-588
  - Snaps to wrong pose for one frame, then goes back to normal
  - Unable to repro at 568-588, but now it happens at 378-380
  - Seems unrelated to #41, there are no goals being added or removed - there are multiple goals, however
  - Looks like the solver is switching between local minima frame to frame, but may be another bug in the objective function
  - Consolidating goals doesn't help
  - This totally invalidates the claims that this solver will give continuous inputs for continuous outputs!
  - Problem goes away after removing gaze joints from the solver - maybe there were discontinuities in gaze joint rotations messing up the solution?

#41 [X] Torso pose generated by body IK sometimes still discontinuous
  - Similar to #38
  - Example can be seen in WindowWashing (w/ Normanette edits, possibly also w/o), frames 445-446
  - The problem may be related to the fact that on RWrist, until 445, we have two goals with the same target (null), but different weights, and from 446 one of those goals is removed - why is that a problem for the solver, though?
  - Confirmed that having two goals, one with weight 0 and another with weight 1, results in completely different behavior (and discontinuity when goal with weight 0 is removed) than having one goal with weight 1 - HOW???
  - There was a bug in how BodyIKSolver was retrieving joints when computing the goal term in ObjFunc1, fixed now

#40 [X] Gaze instances don't get baked correctly - there is snapping to incorrect pose sequences, sometimes for a dozen frames at a time
  - See from frame 190 in WindowWashing with Normanette edits
  - Problem is present only in baked instances - animation looks fine while baking
  - #31 might be related
  - Not a bug, but erroneously gave two instance clips the same name - need to be careful about that (also see #36)
  
#38 [X] Body sometimes snaps, like there is a discontinuity in IK goals
  - Examples can be seen throughout PassSoda
  - Base pose is incorrectly set to be the base pose of the original motion, but it should be the final gaze pose

#37 [X] Limbs sometimes snap, like there is a discontinuity in IK goals
  - Examples can be seen throughout PassSoda
  - Was a bug in LimbIKSolver

#36 [X] Baking controller instances into animation clips is broken again
  - See InitialPose test case - jumps to completely wrong pose on frames 81-82
  - It was just an error in the gaze annotation file for InitialPose

#33 [X] Last gaze instance on the timeline doesn't get properly extended to the end of the timeline when there is a small gap left

#34 [X] Head snaps to wrong orientation when starting a new gaze shift
  - Started after introducing new method of layering gaze with min. change
  - Happens b/c gaze direction plane is discontinuous?
  - Make source and target rotations continuous in 1st order derivative? - no, it would be result in biologically incorrect motion
  - Blend transition between normal vectors (rot. axes)? - no, what if they are almost flipped (nearly the same plane, huge difference in vectors)
  - Blend final rotation? - would work, but seems hacky and unprincipled
  - That might not be the cause after all - happens even if we always use the same normal (Vector3.up)
  - It was actually caused by incorrect storing and computation of various rotations in VOR mode

#25 [X] Sometimes the whole character snaps to wrong pose and gets rendered
  - Seems to happen when switching between gaze instances, but unsure
  - Affects the whole pose, even the feet - maybe resets to initial pose w/o even applying the body motion!
  - Blatant example in WindowWashing around frame 90
  - The problem is absent in baked clip
  - Seems to happen less frequently after commenting out SceneView.RepaintAll() call in LeapAnimationEditor.Update()
  - Completely baffling, it's like the scene gets repainted before animation is applied, but that should be impossible
  - Removing _AdjustGazeParamsForMovingBase() seems to eliminate the problem
  - Solution to #26 may also fix this issue, keep an eye on it
  - Same as #17, fixed
  
#17 [X] Pose sometimes snaps very briefly during animation playback
  - Continued from #16
  - Some snapping does happen over the span of a single frame - this seems to happen when a new gaze instance gets activated while there is an ongoing gaze shift from the previous instance
  - There is always an active eye gaze instance on the timeline getting applied, so that's not the problem
  - The problem is greatly reduced when we take out base.FinishBake() call from EyeGazeInstance.FinishBake() - could it be a timing issue, with writing out the clip being too slow?
  - Problem reduced by delaying the saving of baked curves until after the whole animation has been played & applied - still happens occasionally, though (check that it's only during playback and not in baked animation)
  - It seems to happen more in WindowWashing test case
  - Seems to happen when switching between gaze instances - or more specifically when transition from NoGaze to  Shifting in the gaze controller
  - The problem seems unrelated to latency
  - Occasionally it doesn't happen at all
  - Doesn't happen when there are no gaze instances
  - It seems to affect the whole pose, not just the gaze joints? Maybe it affects the root?
  - Base animation briefly gets rendered at a more advanced time - related to EyeGazeInstance._ComputeMovingTargetPositionOffset(), since taking out the line that applies baseAnimationInstance eliminates the problem!
  - It seems that applying an animation clip causes the scene view to repaint - this seems impossible to prevent or diagnose for sure, since no repaint event appears to get sent!
  - Absurdly, the problem occurs even when the animation clip is applied only at the *current* frame!
  - Effectively, this means animation clip is applied twice in the same frame - why doesn't the scene repainting issue occur when the animation clip is applied once?
  - GOT IT! It was none of the above - what actually happened was that EyeGazeInstance._ComputeMovingTargetPositionOffset() was applying the wrong base animation. It would apply the *first* base animation in the layer, rather than find the one for the *current model*!
  
#12 [X] Eyes still sometimes snap during gaze shifts
 - Seems to be happening at gaze shift boundaries
 - Happens often around WindowWashingGaze8 instance, about 210 frames into the WindowWashing animation
 - Can't repro anymore, maybe it's fixed

#11 [X] Gaze controller sometimes enters a broken state where eyes are snapping betwen targets rather than moving smoothly
  - Happens in the final third of WindowWashing test case
  - Can't repro anymore - may have been due to a bug in how gaze instances were added
  
#30 [X] Baking animation clips does not work correctly when a bone other than the skeleton root bone is tagged as RootBone

#29 [X] BodyIKSolver is slow when using finite differences for gradient estimation
  - Objective function evaluation takes at most 4 ms
  - However, there are as many as 100 evaluations on each run
  - # of iterations is restricted to 10, but maybe that's more than needed
  - Why does the solver sometimes do a huge number of objective evaluations (40+) even when the # of iterations is small (4-5)
  - Temporary fix - set the gradient norm threshold to 0.05; execution time seldom exceeds 70 ms now
  - Still slow in full-body mode (>300 ms), even though # of evaluations isn't high (16 or less)
  - A single evaluation still takes only 5 ms - so where is all that slowness coming from?
  - Using the default preconditioner yields a performance gain on the order of ~50ms
  - Increasing the weight of the base pose term to 5-10 improves performance by 30-50%, but also fails to achieve goals at extreme poses (might not be a problem)
  - Profiling the objective function shows that goal term computation is two orders of magnitude slower than any of the other terms! - That's because of the string-based search for elbow and should joints
  - Optimizing that part reduces full-body solve time to under 20 ms, which is acceptable

#28 [X] BodyIKSolver gives discontinuous poses
  - Seems to happen when a goal switches between reachable and unreachable
  - Set basePoseWeight = 10, lWristEECTest.position = (-0.706, 3.345, 0.143), change rWristEECTest.position from (3.644, 2.983, 0.594) to (3.667, 2.983, 0.594)
  - There is a sudden and large jump in goalTerm value - stuck in a local minimum?
  - It was a bug that is now fixed

#27 [X] BodyIKSolver causes Unity to freeze in some situations
  - Doesn't always freeze, just becomes really slow (takes like 10 sec to solve)
  - Seems to happen when goals become difficult or impossible to reach
  - Restricting iteration count to 10 helps, but there are other problems, see #28

#26 [X] In EyeGazeInstance._AdjustGazeParamsForMovingBase, even when look-ahead time is zero, recomputed gaze parameters are different:
  - In WindowWashing test case there are a ton of examples of gaze shifts where Head.maxVelocity is wildly different from original when lookAheadTime = 0
  - Solution will be to modify the gaze controller such that we can specify predicted position offset of the (relatively) moving target and the gaze controller will do the actual computation of gaze shift parameters

#23 [X] There is a small discontinuity in gaze joint rotations when a new gaze shift starts after a gap

#22 [X] In WindowWashing example, the very first gaze shift starts in the wrong state, like VOR isn't correctly initialized
  - Mistakenly took out setting fixGaze = true in AnimationTimeline._InitControllers(), fixed now

#21 [X] In EyeGazeEditor.AddEyeGaze(), trimming a gaze-back instance sometimes gives an instance that is shorter than the threshold (minEyeGazeLength)
  - Example - TestGaze7-Back (in InitialPose test case) ends up being 205-209
  - No bug, just threshold set too low

#19 [X] Discontinuities of head and torso rotations at the start of gaze shifts
  - Likely due to VOR state variables not being correctly initialized, yet VOR is getting applied while head and torso are latent
  - This should be taken care of as we implement "boundary cases" - gaze controller kicking in and blending out
  - Should have been taken care of with the changes to VOR when FixGazeTarget is null, yet the problem persists
  - Problem fixed

#18 [X] Head and torso get rotated with full alignment during gaze shifts even when alignment parameter is <1
  - Verified with Head.align and Torso.align both set to 0.5
  - The first gaze shift seems to be correct, but every subsequent one fully aligns the torso, no matter what the alignment value (also tried with Torso.align = 0)
  - All gaze controller state values correctly initialized at the start of the gaze shift
  - Mysteriously, in that first (correct) gaze shift, Torso.distRotAlign keeps decreasing over the course of the gaze instance, even when there is just one torso joint that's latent (not moving)
  - Fixed - the way VOR was implemented was incompatible with the way target pose was initialized at the start of the gaze shift
 
#16 [X] Torso joints sometimes snap to wrong rotation values during gaze shifts
  - They always seem to snap back to correct rotations, though
  - Also present in baked animation
  - May be related to #12
  - May be happening at gaze instance boundaries, while the gaze shift from the previous instance is still ongoing
  - The problem is greatly reduced when the call to _AdjustGazeParamsForMovingBase() is removed from EyeGazeInstance.Apply()
  - There seem two separate issues here - see #17 for the other one
  - Fixed, the problem was that even inactive eye gaze instances would subscribe to events from the gaze controller, so their initial state would be wrong and _AdjustGazeParamsForMovingBase() would get called even while the gaze shift for the previous target is ongoing

#14 [X] Discontinuity in torso joint rotations when starting gaze shift to new target
  - Discontinuity seems to be just in the rotation that gets applied to the model - gaze model values appear to be correct and after a few frames the applied rotation also looks correct
  - Might be related to #15
  - Also present in baked animation
  - Fixed, torso rotation (VOR) was incorrectly applied during latency period

#13 [X] When using more than one Head joint, eyes often fail to reach the gaze target
  - This is like bug #6 again, but now with multiple Head joints
  - Happens in the same place as #6 - WindowWashingGaze3, WindowCenterLeft doesn't get reached
  - Fixed by changing how target rotations for joints are updated to account for body movement - now we just do GazeJoint.UpdateTargerRotation() for the *current* joint, rather than all the subsequent joints; keep this change in mind in case it breaks something else

#10 [X] One or both eyes get stuck before reaching the target
  - Similar to what was going on in #5
  - See TestGaze5 with InitialPose as base animation, for example
  - Improved OMR clamping, bug seems to be fixed for now

#9 [X] One or more of the eyes snap back after reaching gaze target, when they should VOR
  - Can't repro, but keep an eye on it
  - This seems to be caused by ClampMRToSource(), which snaps the rotations right back to source, because CheckMR() indicates we are starting outside OMR even at source rotations!
  - Provisional fix added to ClampMRToSource(), but it won't be very robust

#8 [] Saccadic velocities are too low - they should be in excess of 500 deg/s for pure saccades, but they barely reach 200 deg/s

#7 [X] One of the eyes snaps back after reaching the gaze target sometimes
  - This happens when applying WindowWashing gaze sequence to static pose (InitialPose)
  - The problem is due to OMR clamping in GazeJoint.ApplyVOR()

#6 [X] Due to opposing body movement, some gaze shifts are unable to reach their target
  - This can cause gaze snapping when another gaze shift is triggered
  - See for example WindowWashingGaze3, where WindowCenterLeft is never reached
  - Fundamentally this is because we fail to consider the future when synthesizing a gaze shift - i.e., how far the eyes and head will actually have to rotate due to unexpected changes in body movement direction, which determines also max. velocities of the gaze joints
  - Taking into account the future pose gives us somewhat higher max. velocities, but insufficient to compensate for opposing movement of the body
  - Removing rot. progress normalization greatly improves the appearance of gaze shifts, since eyes are now always progressing forward - but is this neurophysiologically correct?
  - One problem is, HEAD doesn't move at all - that's because headAlign = 0 and target is within OMR; however, without head contribution the eyes seem to be too slow
  - This is pure saccadic gaze, yet peak eye velocity is far too low (~180 deg/s) - it should be closer to 500 deg/s!
  - Testing the same gaze sequence with static pose (InitialPose) and the eyes get "stuck" in the same spot w/o ever reaching the gaze target - must be a bug
  - It was a bug - fixed now, there was an UpdateTargetRotations() call in the wrong place

#5 [X] Target rotations don't get correctly computed in VOR, causing a discontinuity of head rotations when VOR kicks in
  - Maybe fixTarget should be the same for *all* joints, rather than different for each
  - It is now and this seems to have gotten rid of some discontinuities

#3 [X] Target rotations of the root joint in the gaze joint chain don't get updated correctly to compensate for body motion
  - Fixed now, not entirely sure if it works properly

#2 [X] When playing back the timeline and layering TestLookLeft, the animation TestLookLeft is applied at the final pose instantly after 0th frame ("final pose" being the pose of the last keyframe), rather than smoothly interpolated
  - This happens in both additive and override layering modes
  - Timing of the animation instance is correct
  - Animation interpolates correctly when clip is played in Unity Animation window.
  - Might be the same bug as above - when layering a synthesized gaze animation (Gaze1), gaze shift is extremely quick (~3 frames or ~100 ms)
  - Playing the animation clip in Unity Animation window works as expected - gaze shift is ~20 frames
  - Fixed by making sure clip time is correctly set for in both AnimationClipInstance.Apply() and AnimationControllerInstance.Apply()

#1 [X] Animation baking using AnimationTimeline.BakeRange() gives a completely messed up animation


Animation Assets:

#82 [X] In WaitForBus example, texture the bus stop sign

#81 [X] In StealDiamond example, the diamond has a hole on top

#80 [X] Roman's left hand in HandShake example is twisted 180 degrees

#79 [] Bookshelf and books in BookShelf example have shared vertices at edges with interpolated normals, so they have a rounded appearance

#65 [X] Base animations clips are getting corrupted - some joints have completely wrong orientations
  - See Norman's right arm in WindowWashing and other examples
  - It only happens on the version of Norman currently in GazeEdit1 scene
  - The problem is that some bones, like the right arm, aren't keyed in all the animations, when they should be keyed to zero - instead they end up retaining the orientation from InitialPose, which isn't necessarily zero
  
#50 [] In some of our test animations, the character's torso rotates very little
  - Confirmed for WindowWashing, should check others
  - More specifically, rotation of the torso is accomplished through torso movement - this is the opposite of how our gaze model currently works
  - Possible causes - 1) that's natural human movement; 2) idiosyncrasy of the actor; 3) weird artifact of retargeting
  - This is a problem b/c we can't achieve this kind of motion with our current gaze model
  - Will be addressed when we extend the gaze model to pelvis movement

#39 [X] In a multicharacter scenario, when a shorter base animation finishes, the model is reset to initial pose, but still shown in the scene
  - The solution is to keyframe the position in all but the longest animation such that the character gets moved out of view, and hold this keyframe until the end of the longest animation
  - For Danny: all animation clips in the same scenario need to be of the same length!
  
#4 [] Norman model gets a bit cross-eyed when animating gaze using standard gaze model - cross-eyedness removal might be necessary

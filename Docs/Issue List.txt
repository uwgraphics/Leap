Leap Animation Editor:

#49 [] End-effector goals are not displayed in the scene view when the character is selected

#48 [X] Current approach for gazing back and blending into the original motion has a bug where the character's pose snaps to the original motion instead of blending smoothly
  - Happens with Roman in the PassSoda test case
  
#47 [] Current approach for gazing back and blending into the original motion is not valid when the original motion has the character facing a radically different direction from the ahead-direction (defined based on the position of the feet)
  - This happens with both Norman and Roman in the PassSoda test case

#46 [] Gaze sometimes leaves alignment with a moving object during VOR phase
  - See how badly Roman tracks SodaBottleB in PassSoda test case

#45 [] Moving end-effector goals attached to the character skeleton itself are not properly enforced
  - See PassSodaBMouth constraint in PassSoda example

#44 [] Eyes sometimes appear to violate OMR quite badly
  - See Roman's eyes in PassSoda example

#35 [] Head snaps to wrong orientation when it begins to rotate at gaze shift start
  - This looks like #34, but circumstances are different - snapping occurs when latency time expires and neck joint stops VOR and begins to rotate
  - Base rotations and gaze rotations are both continuous, so it's discontinuity of the neck normal that is the problem
  - Yet this same discontinuity causes no problem for the topmost head joint
  - Nope, with a different gaze shift sequence it happens for the topmost head joint also
  - Seems to briefly snap to wrong rotation (one or two frames) before going back to normal?
  - Might just be a manifestation of #15
  
#32 [] Torso sometimes jitters during a gaze shift
  - Small discontinuities in pose
  - See end of instance InitialPoseGaze2 in InitialPose test case
  - It doesn't always happen - restarting Unity fixed the problem

#31 [] Incorrect eye pose sometimes gets baked into a gaze instance clip for 1 frame
  - See left eye at frame 38 in InitialPose test case
  
#20 [] Incongruent eye movements occasionally still happen
  - In InitialPose test case, somewhere between frames 200-300, eye gaze directions become divergent over the course of the gaze shift, though they seem to correct themselves by the end
  
#15 [] Head joint rotations seem to snap/jitter between frames
  - Should check to make sure this artifact is present in baked animation - otherwise the issue is that animation gets rendered before it's applied
  - Doesn't seem to be present in baked animation

#24 [] Inference of head and torso alignment values seems to be incorrect in EyeGazeEditor

#43 [X] Gaze annotations loading incorrectly - some get extended inordinately
  - See WindowWashingAGaze24, for instance
  - Not a bug, it's just that min. gaze length is set quite high (1s)

#42 [X] There are *still* discontinuities and snapping in body pose due to BodyIKSolver
  - WindowWashing example is full of them, just see frames 586-588
  - Snaps to wrong pose for one frame, then goes back to normal
  - Unable to repro at 568-588, but now it happens at 378-380
  - Seems unrelated to #41, there are no goals being added or removed - there are multiple goals, however
  - Looks like the solver is switching between local minima frame to frame, but may be another bug in the objective function
  - Consolidating goals doesn't help
  - This totally invalidates the claims that this solver will give continuous inputs for continuous outputs!
  - Problem goes away after removing gaze joints from the solver - maybe there were discontinuities in gaze joint rotations messing up the solution?

#41 [X] Torso pose generated by body IK sometimes still discontinuous
  - Similar to #38
  - Example can be seen in WindowWashing (w/ Normanette edits, possibly also w/o), frames 445-446
  - The problem may be related to the fact that on RWrist, until 445, we have two goals with the same target (null), but different weights, and from 446 one of those goals is removed - why is that a problem for the solver, though?
  - Confirmed that having two goals, one with weight 0 and another with weight 1, results in completely different behavior (and discontinuity when goal with weight 0 is removed) than having one goal with weight 1 - HOW???
  - There was a bug in how BodyIKSolver was retrieving joints when computing the goal term in ObjFunc1, fixed now

#40 [X] Gaze instances don't get baked correctly - there is snapping to incorrect pose sequences, sometimes for a dozen frames at a time
  - See from frame 190 in WindowWashing with Normanette edits
  - Problem is present only in baked instances - animation looks fine while baking
  - #31 might be related
  - Not a bug, but erroneously gave two instance clips the same name - need to be careful about that (also see #36)
  
#38 [X] Body sometimes snaps, like there is a discontinuity in IK goals
  - Examples can be seen throughout PassSoda
  - Base pose is incorrectly set to be the base pose of the original motion, but it should be the final gaze pose

#37 [X] Limbs sometimes snap, like there is a discontinuity in IK goals
  - Examples can be seen throughout PassSoda
  - Was a bug in LimbIKSolver

#36 [X] Baking controller instances into animation clips is broken again
  - See InitialPose test case - jumps to completely wrong pose on frames 81-82
  - It was just an error in the gaze annotation file for InitialPose

#33 [X] Last gaze instance on the timeline doesn't get properly extended to the end of the timeline when there is a small gap left

#34 [X] Head snaps to wrong orientation when starting a new gaze shift
  - Started after introducing new method of layering gaze with min. change
  - Happens b/c gaze direction plane is discontinuous?
  - Make source and target rotations continuous in 1st order derivative? - no, it would be result in biologically incorrect motion
  - Blend transition between normal vectors (rot. axes)? - no, what if they are almost flipped (nearly the same plane, huge difference in vectors)
  - Blend final rotation? - would work, but seems hacky and unprincipled
  - That might not be the cause after all - happens even if we always use the same normal (Vector3.up)
  - It was actually caused by incorrect storing and computation of various rotations in VOR mode

#25 [X] Sometimes the whole character snaps to wrong pose and gets rendered
  - Seems to happen when switching between gaze instances, but unsure
  - Affects the whole pose, even the feet - maybe resets to initial pose w/o even applying the body motion!
  - Blatant example in WindowWashing around frame 90
  - The problem is absent in baked clip
  - Seems to happen less frequently after commenting out SceneView.RepaintAll() call in LeapAnimationEditor.Update()
  - Completely baffling, it's like the scene gets repainted before animation is applied, but that should be impossible
  - Removing _AdjustGazeParamsForMovingBase() seems to eliminate the problem
  - Solution to #26 may also fix this issue, keep an eye on it
  - Same as #17, fixed
  
#17 [X] Pose sometimes snaps very briefly during animation playback
  - Continued from #16
  - Some snapping does happen over the span of a single frame - this seems to happen when a new gaze instance gets activated while there is an ongoing gaze shift from the previous instance
  - There is always an active eye gaze instance on the timeline getting applied, so that's not the problem
  - The problem is greatly reduced when we take out base.FinishBake() call from EyeGazeInstance.FinishBake() - could it be a timing issue, with writing out the clip being too slow?
  - Problem reduced by delaying the saving of baked curves until after the whole animation has been played & applied - still happens occasionally, though (check that it's only during playback and not in baked animation)
  - It seems to happen more in WindowWashing test case
  - Seems to happen when switching between gaze instances - or more specifically when transition from NoGaze to  Shifting in the gaze controller
  - The problem seems unrelated to latency
  - Occasionally it doesn't happen at all
  - Doesn't happen when there are no gaze instances
  - It seems to affect the whole pose, not just the gaze joints? Maybe it affects the root?
  - Base animation briefly gets rendered at a more advanced time - related to EyeGazeInstance._ComputeMovingTargetPositionOffset(), since taking out the line that applies baseAnimationInstance eliminates the problem!
  - It seems that applying an animation clip causes the scene view to repaint - this seems impossible to prevent or diagnose for sure, since no repaint event appears to get sent!
  - Absurdly, the problem occurs even when the animation clip is applied only at the *current* frame!
  - Effectively, this means animation clip is applied twice in the same frame - why doesn't the scene repainting issue occur when the animation clip is applied once?
  - GOT IT! It was none of the above - what actually happened was that EyeGazeInstance._ComputeMovingTargetPositionOffset() was applying the wrong base animation. It would apply the *first* base animation in the layer, rather than find the one for the *current model*!
  
#12 [X] Eyes still sometimes snap during gaze shifts
 - Seems to be happening at gaze shift boundaries
 - Happens often around WindowWashingGaze8 instance, about 210 frames into the WindowWashing animation
 - Can't repro anymore, maybe it's fixed

#11 [X] Gaze controller sometimes enters a broken state where eyes are snapping betwen targets rather than moving smoothly
  - Happens in the final third of WindowWashing test case
  - Can't repro anymore - may have been due to a bug in how gaze instances were added
  
#30 [X] Baking animation clips does not work correctly when a bone other than the skeleton root bone is tagged as RootBone

#29 [X] BodyIKSolver is slow when using finite differences for gradient estimation
  - Objective function evaluation takes at most 4 ms
  - However, there are as many as 100 evaluations on each run
  - # of iterations is restricted to 10, but maybe that's more than needed
  - Why does the solver sometimes do a huge number of objective evaluations (40+) even when the # of iterations is small (4-5)
  - Temporary fix - set the gradient norm threshold to 0.05; execution time seldom exceeds 70 ms now
  - Still slow in full-body mode (>300 ms), even though # of evaluations isn't high (16 or less)
  - A single evaluation still takes only 5 ms - so where is all that slowness coming from?
  - Using the default preconditioner yields a performance gain on the order of ~50ms
  - Increasing the weight of the base pose term to 5-10 improves performance by 30-50%, but also fails to achieve goals at extreme poses (might not be a problem)
  - Profiling the objective function shows that goal term computation is two orders of magnitude slower than any of the other terms! - That's because of the string-based search for elbow and should joints
  - Optimizing that part reduces full-body solve time to under 20 ms, which is acceptable

#28 [X] BodyIKSolver gives discontinuous poses
  - Seems to happen when a goal switches between reachable and unreachable
  - Set basePoseWeight = 10, lWristEECTest.position = (-0.706, 3.345, 0.143), change rWristEECTest.position from (3.644, 2.983, 0.594) to (3.667, 2.983, 0.594)
  - There is a sudden and large jump in goalTerm value - stuck in a local minimum?
  - It was a bug that is now fixed

#27 [X] BodyIKSolver causes Unity to freeze in some situations
  - Doesn't always freeze, just becomes really slow (takes like 10 sec to solve)
  - Seems to happen when goals become difficult or impossible to reach
  - Restricting iteration count to 10 helps, but there are other problems, see #28

#26 [X] In EyeGazeInstance._AdjustGazeParamsForMovingBase, even when look-ahead time is zero, recomputed gaze parameters are different:
  - In WindowWashing test case there are a ton of examples of gaze shifts where Head.maxVelocity is wildly different from original when lookAheadTime = 0
  - Solution will be to modify the gaze controller such that we can specify predicted position offset of the (relatively) moving target and the gaze controller will do the actual computation of gaze shift parameters

#23 [X] There is a small discontinuity in gaze joint rotations when a new gaze shift starts after a gap

#22 [X] In WindowWashing example, the very first gaze shift starts in the wrong state, like VOR isn't correctly initialized
  - Mistakenly took out setting fixGaze = true in AnimationTimeline._InitControllers(), fixed now

#21 [X] In EyeGazeEditor.AddEyeGaze(), trimming a gaze-back instance sometimes gives an instance that is shorter than the threshold (minEyeGazeLength)
  - Example - TestGaze7-Back (in InitialPose test case) ends up being 205-209
  - No bug, just threshold set too low

#19 [X] Discontinuities of head and torso rotations at the start of gaze shifts
  - Likely due to VOR state variables not being correctly initialized, yet VOR is getting applied while head and torso are latent
  - This should be taken care of as we implement "boundary cases" - gaze controller kicking in and blending out
  - Should have been taken care of with the changes to VOR when FixGazeTarget is null, yet the problem persists
  - Problem fixed

#18 [X] Head and torso get rotated with full alignment during gaze shifts even when alignment parameter is <1
  - Verified with Head.align and Torso.align both set to 0.5
  - The first gaze shift seems to be correct, but every subsequent one fully aligns the torso, no matter what the alignment value (also tried with Torso.align = 0)
  - All gaze controller state values correctly initialized at the start of the gaze shift
  - Mysteriously, in that first (correct) gaze shift, Torso.distRotAlign keeps decreasing over the course of the gaze instance, even when there is just one torso joint that's latent (not moving)
  - Fixed - the way VOR was implemented was incompatible with the way target pose was initialized at the start of the gaze shift
 
#16 [X] Torso joints sometimes snap to wrong rotation values during gaze shifts
  - They always seem to snap back to correct rotations, though
  - Also present in baked animation
  - May be related to #12
  - May be happening at gaze instance boundaries, while the gaze shift from the previous instance is still ongoing
  - The problem is greatly reduced when the call to _AdjustGazeParamsForMovingBase() is removed from EyeGazeInstance.Apply()
  - There seem two separate issues here - see #17 for the other one
  - Fixed, the problem was that even inactive eye gaze instances would subscribe to events from the gaze controller, so their initial state would be wrong and _AdjustGazeParamsForMovingBase() would get called even while the gaze shift for the previous target is ongoing

#14 [X] Discontinuity in torso joint rotations when starting gaze shift to new target
  - Discontinuity seems to be just in the rotation that gets applied to the model - gaze model values appear to be correct and after a few frames the applied rotation also looks correct
  - Might be related to #15
  - Also present in baked animation
  - Fixed, torso rotation (VOR) was incorrectly applied during latency period

#13 [X] When using more than one Head joint, eyes often fail to reach the gaze target
  - This is like bug #6 again, but now with multiple Head joints
  - Happens in the same place as #6 - WindowWashingGaze3, WindowCenterLeft doesn't get reached
  - Fixed by changing how target rotations for joints are updated to account for body movement - now we just do GazeJoint.UpdateTargerRotation() for the *current* joint, rather than all the subsequent joints; keep this change in mind in case it breaks something else

#10 [X] One or both eyes get stuck before reaching the target
  - Similar to what was going on in #5
  - See TestGaze5 with InitialPose as base animation, for example
  - Improved OMR clamping, bug seems to be fixed for now

#9 [X] One or more of the eyes snap back after reaching gaze target, when they should VOR
  - Can't repro, but keep an eye on it
  - This seems to be caused by ClampMRToSource(), which snaps the rotations right back to source, because CheckMR() indicates we are starting outside OMR even at source rotations!
  - Provisional fix added to ClampMRToSource(), but it won't be very robust

#8 [] Saccadic velocities are too low - they should be in excess of 500 deg/s for pure saccades, but they barely reach 200 deg/s

#7 [X] One of the eyes snaps back after reaching the gaze target sometimes
  - This happens when applying WindowWashing gaze sequence to static pose (InitialPose)
  - The problem is due to OMR clamping in GazeJoint.ApplyVOR()

#6 [X] Due to opposing body movement, some gaze shifts are unable to reach their target
  - This can cause gaze snapping when another gaze shift is triggered
  - See for example WindowWashingGaze3, where WindowCenterLeft is never reached
  - Fundamentally this is because we fail to consider the future when synthesizing a gaze shift - i.e., how far the eyes and head will actually have to rotate due to unexpected changes in body movement direction, which determines also max. velocities of the gaze joints
  - Taking into account the future pose gives us somewhat higher max. velocities, but insufficient to compensate for opposing movement of the body
  - Removing rot. progress normalization greatly improves the appearance of gaze shifts, since eyes are now always progressing forward - but is this neurophysiologically correct?
  - One problem is, HEAD doesn't move at all - that's because headAlign = 0 and target is within OMR; however, without head contribution the eyes seem to be too slow
  - This is pure saccadic gaze, yet peak eye velocity is far too low (~180 deg/s) - it should be closer to 500 deg/s!
  - Testing the same gaze sequence with static pose (InitialPose) and the eyes get "stuck" in the same spot w/o ever reaching the gaze target - must be a bug
  - It was a bug - fixed now, there was an UpdateTargetRotations() call in the wrong place

#5 [X] Target rotations don't get correctly computed in VOR, causing a discontinuity of head rotations when VOR kicks in
  - Maybe fixTarget should be the same for *all* joints, rather than different for each
  - It is now and this seems to have gotten rid of some discontinuities

#3 [X] Target rotations of the root joint in the gaze joint chain don't get updated correctly to compensate for body motion
  - Fixed now, not entirely sure if it works properly

#2 [X] When playing back the timeline and layering TestLookLeft, the animation TestLookLeft is applied at the final pose instantly after 0th frame ("final pose" being the pose of the last keyframe), rather than smoothly interpolated
  - This happens in both additive and override layering modes
  - Timing of the animation instance is correct
  - Animation interpolates correctly when clip is played in Unity Animation window.
  - Might be the same bug as above - when layering a synthesized gaze animation (Gaze1), gaze shift is extremely quick (~3 frames or ~100 ms)
  - Playing the animation clip in Unity Animation window works as expected - gaze shift is ~20 frames
  - Fixed by making sure clip time is correctly set for in both AnimationClipInstance.Apply() and AnimationControllerInstance.Apply()

#1 [X] Animation baking using AnimationTimeline.BakeRange() gives a completely messed up animation


Character Models:

#39 [X] In a multicharacter scenario, when a shorter base animation finishes, the model is reset to initial pose, but still shown in the scene
  - The solution is to keyframe the position in all but the longest animation such that the character gets moved out of view, and hold this keyframe until the end of the longest animation
  - For Danny: all animation clips in the same scenario need to be of the same length!
  
#4 [] Norman model gets a bit cross-eyed when animating gaze using standard gaze model - cross-eyedness removal might be necessary
